//@@ru-SU:cp866
override public class Platform static with inner align of

  final const of
    target = 'MENUET01';
    assembler = 'x86';
  end;

  public class Bound of
    public var word(16) Org, Size;
  end;

// public class WindowType = (FixedSize, OwnerDraw, Sizeable, SkinnedSizeable, SkinnedFixedSize);

  public class Color of
    public var byte Blue, Green Red, Style;
  end;

  public class Rect of
    public var word(16) Y, X; // !!!
    public out NoDriver = Y.AsInteger; // TODO: for GetVideoModeError
  end;

  // Определить и нарисовать окно
  public DrawWindow(Bound x, y; Color windowColor, captionColor, borderColor) mcall 0;
  // Поставить точку в окне
  public PutPixel(word x, y; Color color, invert) mcall 1;
  // Получить код нажатой клавиши
  public out word GetKey mcall 2;
  // Получить системное время
  public GetSystemTime(out word ssmmhh) mcall 3;
  // Вывести строку текста в окно
  public DrawText(Rect rect; Color color; ref raw str; word length) mcall 4;
  // Установить задержку (паузу)
  public Pause(word milliseconds) mcall 5;
  // Прочитать файл с RAM-диска
  public out int ReadFileFromRamdisk(ref raw name; word startBlock, blockCount;
    ref raw dest) mcall 6;
  // Вывести изображение в окно
  public DrawImage(ref raw image; Bound x, y) mcall 7;
  // Определить 3D-кнопку
  public Define3DButton(Bound x, y; word id; Color color) mcall 8;
  // Удалить 3D-кнопку
  public Delete3DButton(word reserved1, reserved2, id) mcall 8;

  public class ThreadInfo
    // TODO
  end;

  // Информация о потоке выполнения
  public out word GetThreadInfo(var ThreadInfo info; word slot) mcall 9;
  // Ожидать события
  public out word WaitForEvent mcall 10;
  // Проверить, есть ли событие, без ожидания
  public out word CheckForEvent mcall 11;
  // Начать перерисовку окна
  public BeginWindowPaint mcall 12, 1;
  // Закончить перерисовку окна
  public EndWindowPaint mcall 12, 2;
  // Нарисовать прямоугольник в окне
  public FillRect(Coord x, y; Color color) mcall 13;
  // Получить размер экрана
  public out Rect GetScreenSize mcall 14;
  // Установить размер фонового изображения
  public SetBackgroundSize(word width, height) mcall 15, 1;
  // Поставить точку на фоновом изображении
  public PutBackgroundPixel(word offset; Color color) mcall 15, 2;
  // Перерисовать фон
  public RedrawBackground mcall 15, 3;
  // Установить режим отрисовки фона
  public SetBackgroundMode(word mode) mcall 15, 4;
  // Поместить блок пикселей на фон
  public PutBackgroundPixels(raw pixels; word offset, length); mcall 15, 5;
  // Спроецировать данные фона на адресное пространство процесса
  public out ref raw MapBackgroundData mcall 15, 6; // TODO
  // Закрыть проекцию данных фона на адресное пространство процесса
  public UnmapBackgroundData mcall 15, 7;
  // Сохранить рамдиск на дискету
  public out bool SaveRamdiskOnFloppy(word diskNumber) mcall 16;
  // Получить идентификатор нажатой кнопки
  public out word GetPressedButtonID mcall 17;

  // Сделать самым нижним окно потока
  public SetBackgroundWindow(word slot) mcall 18, 2;
  // Завершить процесс/поток по слоту
  public KillProcessOrThread(word slot) mcall 18, 2;
  // Сделать активным окно заданного потока
  public ActivateWindow(word slot) mcall 18, 3;

  // Получить счётчик пустых тактов в секунду
  public out word GetHltTicksPerSecond(word slot) mcall 18, 4;
  // Получить тактовую частоту
  public out word GetClockRate(word slot) mcall 18, 5;
  // Сохранить рамдиск на дискету
  public out bool SaveRamdiskToFile(ref raw fileName) mcall 18, 6;

  // Получить номер активного окна
  public out word GetActiveWindow( mcall 18, 7;
  // Получить состояние спикера
  public out bool GetSpeakerState mcall 18, 8, 1;
  // Переключить состояние спикера
  public ToggleSpeakerState mcall 18, 8, 2;
  // Завершение работы системы с параметром
  public ShutdownSystem(word mode) mcall 18, 9;
  // Свернуть окно приложения
  public MinimizeWindow mcall 18, 10;

  public class DiskSubsystemInfo
    // TODO
  end;

  public GetDiskSubsystemInfo(word infoType; var DiskSubsystemInfo info) mcall 18, 11;

  public class KernelVersion
    // TODO
  end;

  // Получить версию ядра
  public GetKernelVersion(var KernelVersion ver) mcall 18, 13;

  // Ожидать начала обратного хода луча развёртки монитора
  public out word WaitForFlyback mcall 18, 14;
  // Поместить курсор мыши в центр экрана
  public out word CenterMouse mcall 18, 15;
  // Получить размер свободной оперативной памяти
  public word GetFreeMemKB mcall 18, 16;
  // Получить размер доступной оперативной памяти
  public word GetAvailableMemKB mcall 18, 17;

  // Завершить процесс/поток по идентификатору
  public int EndProcessOrThread(word id) mcall 18, 18;

  // Получить скорость мыши
  public out word GetMouseSpeed mcall 18, 19, 0;
  // Установить скорость мыши
  public SetMouseSpeed(word speed) mcall 18, 19, 1;
  // Получить задержку мыши
  public out word GetMouseDelay mcall 18, 19, 2;
  // Установить задержку мыши
  public SetMouseDelay(word delay) mcall 18, 19, 3;
  // Установить положение курсора мыши
  public SetMousePos(Rect pos) mcall 18, 19, 4;
  // Симулировать состояние кнопок мыши
  public SimulateMouseButtonPress(word buttons) mcall 18, 19, 5;

  public class MemoryInfo
    // TODO
  end;

  // Получить информацию об оперативной памяти
  public out int GetMemoryInfo(out MemoryInfo info) mcall 18, 20;
  // Получить номер слота процесса/потока по идентификатору
  public out word GetProcessOrThreadSlot(word id) mcall 18, 21

  // Операции с окном другого процесса/потока
  public out int ControlOtherWindow(word op, idOrSlot) mcall 18, 22;

  public static class MIDI
    // Cброс MIDI
    public Reset mcall 20, 1;
    // Вывести байт MIDI
    public out word OutByte(byte value) mcall 20, 2;
    // Установить базовый порт MPU MIDI
    public out int SetBasePort(word port) mcall 21, 1;
    // Получить базовый порт MPU MIDI
    public out word GetBasePort(word port) mcall 26, 1;
  end;

  public static class KeyboardLayout
    public class ModifierKey = (None, Shift, Alt);
    public class byte KeyMap[128];
    public class Locale = (English, Finnish, German, Russian);
    public class Result = (Success, InvalidParam);

    // Установить раскладку клавиатуры
    public out Result[ModifierKey; KeyMap] mcall 21, 2;
    public out Result[Locale] mcall 21, 2, 9; // overload

    // Получить раскладку клавиатуры
    public (ModifierKey; var KeyMap) mcall 26, 2;
    public out Locale mcall 26, 2, 9;
  end;

  /* usage magic
    var KeyboardLayout:Locale locale = KeyboardLayout; // calls unnamed out Locale
    if KeyboardLayout[Russian] = Success then
      // welcome to USSR!
    end;
    if KeyboardLayout[layout] <> Success then
      // restore failed
    end;
  */

  // Установить язык системы
  public out word SetSystemLanguage(word locale) mcall 21, 5;

  public static class Device
    public out word EnableLowlevelAccess(bool enable);
    public out bool IsLowlevelAccessEnabled;
  end;

  public static class HDD from Device
    // Установить базу HDD
    public out word SetBase(word ideX) mcall 21, 7;
    // Установить раздел HDD
    public out word SetPartition(word partition) mcall 21, 8;
    // Разрешить/запретить низкоуровневый доступ к HDD
    public out word EnableLowlevelAccess(bool enable) mcall 21, 11;
    // Получить базу HDD
    public out word GetBase mcall 26, 7;
    // Получить раздел HDD
    public out word GetPartition mcall 26, 8;
    // Узнать, разрешён ли низкоуровневый доступ к HD
    public out bool IsLowlevelAccessEnabled mcall 26, 11;
  end;

  public static class PCI from Device
    // Разрешить/запретить низкоуровневый доступ к PCI
    public out word EnableLowlevelAccess(bool enable) mcall 21, 12;
    // Узнать, разрешён ли низкоуровневый доступ к PCI
    public out bool IsLowlevelAccessEnabled mcall 26, 12;
  end;

  public class VideoDriverInfo
    // TODO
  end;

  // Инициализировать + получить информацию о драйвере vmode.mdr
  public out int GetVideoDriverInfo(var VideoDriverInfo info) mcall 21, 13, 1;
  // Получить информацию о текущем видеорежиме
  public GetVideoModeInfo(out Rect screenSize; out word verticalRefresh, videoMode) mcall 21, 13, 2;

  public class VideoMode
    public var word(16) Mode, VerticalRefresh;
  end;

  // Установить видеорежим
  public out int SetVideoMode(VideoMode mode) mcall 21, 13, 3;
  // Вернуться к начальному видеорежиму
  public out int RestoreVideoMode mcall 21, 13, 4;
  // Увеличить/уменьшить размер видимой области монитора
  public out int AdjustDisplayViewableArea(word op) mcall 21, 13, 5;

  // Установить системную дату/время
  public out word SetTime(word ssmmhh) mcall 22, 0;
  public out word SetDate(word ddmmyy) mcall 22, 1;
  public out word SetDayOfWeek(word "sunday=1") mcall 22, 2;
  public out word SetAlarmClock(word ssmmhh) mcall 22, 3;

  // Ожидать события с таймаутом
  public out word WaitForEvent(word milliseconds) mcall 23; // overload for mcall 10

  public static class CD
    // Установить базу CD
    public out word SetBase(word ideX) mcall 21, 3;
    // Начать воспроизведение аудио-CD
    public out word StartPlaying(word frssmm) mcall 24, 1;
    // Получить информацию о дорожках
    public out word GetTOC(ref raw toc) mcall 24, 2; // TODO
    // Остановить воспроизведение аудио-CD
    public out word StopPlaying(word frssmm) mcall 24, 3;
    // Извлечь лоток привода диска
    public out word Eject(word ideX) mcall 24, 4;
    // Загрузить лоток привода диска
    public out word Load(word ideX) mcall 24, 5;
    // Получить базу CD
    public out word GetBase mcall 26, 3;
  end;

  // Получить язык системы
  public word GetSystemLanguage mcall 26, 5;
  // Получить значение счётчика времени
  public word GetTickCount mcall 26, 9;

  // Получить системную дату
  public GetSystemDate(out word ddmmyy) mcall 29;

  // Установить текущую папку для потока
  public SetCurrentDir(ref raw name) mcall 30, 1;
  // Получить текущую папку для потока
  public out word GetCurrentDir(var raw name; word count) mcall 30, 2;

  // Прочитать цвет точки на экране
  public out Color GetScreenPixel(word offset) mcall 35;
  // Прочитать область экрана
  public GetScreenPixels(ref raw dest; Bound x, y) mcall 36;

  // Экранные координаты мыши
  public out Bounds GetMouseScreenCoords mcall 37, 0;
  // Координаты мыши относительно окна
  public out Bounds GetMouseWindowCoords mcall 37, 1;
  // Нажатые кнопки мыши
  public out word GetMousePressedButtons mcall 37, 2;
  // Загрузить курсор
  public out word LoadMouseCursor mcall 37, 4; // TODO
  // Установить курсор
  public SetCursor(Cursor value) mcall 37, 5;
  // Удалить курсор
  public DestroyCursor(Cursor value) mcall 37, 6;
  // Данные прокрутки
  public out Bounds GetScrollBounds mcall 37, 6;

  // Нарисовать отрезок
  public DrawLine(Bound x, y; Color color; word invertColor) mcall 38;

  // Получить размер фонового изображения
  public out Size GetBackgroundSize mcall 39, 1;
  // Прочитать точку с фонового изображения
  public out Color GetBackgroundPixel mcall 39, 2;
  // Получить режим отрисовки фона
  public out word GetBackgroundMode mcall 39, 4;

  // Установить маску для ожидаемых событий
  public out word SetEventMask(word mask) mcall 40;

  public static class Port
    // Вывод данных в порт
    public word Out(byte value; word port) mcall 43;
    // Ввод данных из порта
    public word In(word ignored; word port) mcall 43;
  end;

  // Зарезервировать/освободить группу портов ввода/вывода
  public word CapturePortRange(word min, max) mcall 46, 0;
  public word ReleasePortRange(word min, max) mcall 46, 1;

  // Вывести число в окно
  public DrawNumber(word options, number; Point point; Color color) mcall 47;
  public DrawNumber(word options; ref word number; Point point; Color color) mcall 47;

  // Применить настройки экрана
  public SetScreenMode(word reserved = 0) mcall 48, 0;
  // Установить стиль кнопок
  public SetButtonStyle(bool is3D) mcall 48, 1;
  // Установить стандартные цвета окон
  public SetSystemPalette(ref raw palette; word count) mcall 48, 2; // TODO
  // Получить стандартные цвета окон
  public GetSystemPalette(ref raw palette; word count) mcall 48, 3;
  // Получить высоту скина
  public out word GetSkinHeight mcall 48, 4;
  // Получить рабочую область экрана
  public GetDesktopBounds(out Bound x, y) mcall 48, 5;
  // Установить рабочую область экрана
  public SetDesktopBounds(Bound x, y) mcall 48, 6;
  // Установить рабочую область экрана
  public GetCaptionBounds(Bound x, y) mcall 48, 7;
  // Установить рабочую область экрана
  public out word SetSkin(ref raw fileName) mcall 48, 8;

  public static class APM
    // TODO
  end;

  // Установка данных с информацией о форме окна
  public SetWindowRegion(raw points) mcall 50, 0;
  // Установка масштаба данных формы окна
  public SetWindowRegionScale(Point scale) mcall 50, 1; // TODO: verify

  // Создать поток
  public CreateThread(raw entryPoint, stack)  mcall 51, 1;

  // Получить конфигурацию сетевого драйвера
  public out word GetNetworkConfig mcall 52, 0;
  // Получить локальный IP-адрес
  public out word GetLocalIP mcall 52, 1;
  // Установить конфигурацию сетевого драйвера
  public out word SetNetworkConfig(word control) mcall 52, 2;
  // Установить локальный IP-адрес
  public out word SetLocalIP(word ip) mcall 52, 3;
  // Добавить данные в стек входной очереди
  public out word WriteInputStack(word count; raw data) mcall 52, 6;
  // Прочитать данные из сетевой очереди вывода
  public out word ReadOutputStack(raw data) mcall 52, 8; // TODO
  // Получить gateway IP
  public out word GetGatewayIP mcall 52, 9;
  // Получить gateway IP
  public out word GetSubnetMask mcall 52, 10;
  // Установить gateway IP
  public SetGatewayIP(word ip) mcall 52, 11;
  // Установить gateway IP
  public SetSubnetMask(word mask) mcall 52, 12;
  // Получить IP DNS
  public out word GetDNSIP mcall 52, 13; // TODO?
  // Установить IP DNS
  public SetDNSIP(word ip) mcall 52, 14;
  // Получить локальный MAC-адрес
  public out word GetLocalMac(offset word) mcall 52, 15;

  // Открыть UDP-сокет
  public mcall 53, 0;
  // Закрыть UDP-сокет
  public mcall 53, 1;
  // Опрос сокета
  public mcall 53, 2;
  // Прочитать байт из сокета
  public mcall 53, 3;
  // Записать в UDP-сокет
  public mcall 53, 4;
  // Открыть TCP-сокет
  public mcall 53, 5;
  // Получить состояние TCP-сокета
  public mcall 53, 6;
  // Записать в TCP-сокет
  public mcall 53, 7;
  // Закрыть TCP-сокет
  public mcall 53, 8;
  // проверить, свободен ли локальный порт
  public mcall 53, 9;
  // Получить статус кабеля Ethernet
  public mcall 53, 10;
  // Прочитать данные сетевого стека
  public mcall 53, 11;
  // отладочная информация сетевого драйвера
  public mcall 53, 255;

  // Завершить программу
  public CloseProgram mcall -1;
end;
